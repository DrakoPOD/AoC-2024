    zone = []

    with open('./example_day06.txt') as f:
        for line in f:
            zone.append([0] + list(line.strip()) + [0])
        zeros = [0] * len(zone[0])
        zone.insert(0, zeros)
        zone.append(zeros)

    origin = []

    for i in range(1, len(zone) - 1):
        for j in range(1, len(zone[i]) - 1):
            point = zone[i][j]
            if point != '.' and point != '#' and point != 0:
                origin = [i, j]
                break

        if pos:
            break

    facing = {
        '^': [-1, 0],
        '>': [0, 1],
        'v': [1, 0],
        '<': [0, -1]
    }
    current_direction = zone[pos[0]][pos[1]]

    current_direction = zone[origin[0]][origin[1]]
    zone[origin[0]][origin[1]] = '.'
    pos = origin.copy()

    def move_and_block(pos, direction):
        global zone, facing
        alternate_zone = np.array(zone, copy=True)
        count_zone = np.zeros(alternate_zone.shape)
        alternate_zone[pos[0]][pos[1]] = direction

        block = [pos[0] + facing[direction][0], pos[1] + facing[direction][1]]

        if alternate_zone[block[0]][block[1]] != '#':
            alternate_zone[block[0]][block[1]] = '#'
        else:
            return False, []
        
        loop = True
        first = True
        last_steps = []

        while loop:
            start = alternate_zone[pos[0]][pos[1]]

            if start == direction and not first:
                return True, block
            first = False

            last_steps.append(count_zone[pos[0]][pos[1]])

            if len(last_steps) > 10:
                last_steps.pop(0)

            if all([x > 10 for x in last_steps]):
                return True, block

            if start == '0':
                return False, []
            
            block = [pos[0] + facing[direction][0], pos[1] + facing[direction][1]]

            blocked = alternate_zone[block[0]][block[1]] == '#'
                
            if direction == '^':
                if blocked:
                    direction = '>'
                    continue
                count_zone[pos[0]][pos[1]] += 1
                pos[0] -= 1
            elif direction == '>':
                if blocked:
                    direction = 'v'
                    continue
                count_zone[pos[0]][pos[1]] += 1
                pos[1] += 1
            elif direction == 'v':
                if blocked:
                    direction = '<'
                    continue
                count_zone[pos[0]][pos[1]] += 1
                pos[0] += 1
            elif direction == '<':
                if blocked:
                    direction = '^'
                    continue
                count_zone[pos[0]][pos[1]] += 1
                pos[1] -= 1

    possibilities = []

    while True:
        result, block = move_and_block(pos.copy(), current_direction)

        if result:
            possibilities.append(block)

        next_pos = zone[pos[0] + facing[current_direction][0]][pos[1] + facing[current_direction][1]]
        if next_pos == 0:
            break
        
        if current_direction == '^':
            if next_pos == '#':
                current_direction = '>'
            else:
                pos[0] -= 1
        elif current_direction == '>':
            if next_pos == '#':
                current_direction = 'v'
            else:
                pos[1] += 1
        elif current_direction == 'v':
            if next_pos == '#':
                current_direction = '<'
            else:
                pos[0] += 1
        elif current_direction == '<':
            if next_pos == '#':
                current_direction = '^'
            else:
                pos[1] -= 1


    len(list(map(list,set(map(tuple,possibilities)))))